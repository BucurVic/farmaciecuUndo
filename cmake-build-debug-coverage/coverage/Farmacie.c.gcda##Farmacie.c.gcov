        -:    0:Source:C:/FACC/OOP/Lab5(Undo David)/farmaciecuUndo/Farmacie.c
        -:    0:Graph:C:\FACC\OOP\Lab5(Undo David)\farmaciecuUndo\cmake-build-debug-coverage\CMakeFiles\farmacie2.dir\Farmacie.c.gcno
        -:    0:Data:C:\FACC\OOP\Lab5(Undo David)\farmaciecuUndo\cmake-build-debug-coverage\CMakeFiles\farmacie2.dir\Farmacie.c.gcda
        -:    0:Runs:1
        -:    1:#include "Farmacie.h"
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include <stdlib.h>
        -:    5:
        -:    6:/**
        -:    7: * constructor for farmacie
        -:    8: * @return far - array of meds
        -:    9: */
function createFarmacie called 49 returned 100% blocks executed 100%
       49:   10:Farmacie* createFarmacie(){
       49:   11:    Farmacie* far = malloc(sizeof(Farmacie));
       49:   12:    far->len = 0;
       49:   13:    far->maxCapacity = 1;
       49:   14:    far->elems = malloc(sizeof(ElemType) * far->maxCapacity);
       49:   15:    return far;
       49:   15-block  0
        -:   16:}
        -:   17:
function destroyFarmacieMed called 19 returned 100% blocks executed 100%
       19:   18:void destroyFarmacieMed(Farmacie* far){
       19:   19:    destroyFarmacie(far, (DestroyFct) destroyMed, 0);
       19:   19-block  0
call    0 returned 19
       19:   20:}
        -:   21:
        -:   22:/**
        -:   23: * destructor for farmacie
        -:   24: */
function destroyFarmacie called 46 returned 100% blocks executed 100%
       46:   25:void destroyFarmacie(Farmacie* far, DestroyFct functiedestroy, int ok){
      126:   26:    for(int i=0;i<size(far);i++) {
       46:   26-block  0
      126:   26-block  1
call    0 returned 126
branch  1 taken 80
branch  2 taken 46 (fallthrough)
       80:   27:        ElemType elem = far->elems[i];
       80:   28:        functiedestroy(elem);
       80:   28-block  0
call    0 returned 80
        -:   29:    }
       46:   30:    free(far->elems);
       46:   31:    free(far);
       46:   32:}
        -:   33:
        -:   34:/**
        -:   35: * function to resize the array
        -:   36: * @param far - Farmacie
        -:   37: */
function resize called 45 returned 100% blocks executed 100%
       45:   38:void resize(Farmacie* far){
       45:   39:    ElemType* meds = malloc(sizeof(Medicament) * far->maxCapacity * 2);
      102:   40:    for(int i=0;i<size(far);i++)
       45:   40-block  0
      102:   40-block  1
call    0 returned 102
branch  1 taken 57
branch  2 taken 45 (fallthrough)
       57:   41:        meds[i] = far->elems[i];
       57:   41-block  0
       45:   42:    free(far->elems);
       45:   43:    far->maxCapacity = 2 * far->maxCapacity;
       45:   44:    far->elems = meds;
       45:   45:}
        -:   46:
        -:   47:/**
        -:   48: * repo function to get an element from the array
        -:   49: * @param farmacie - Farmacie*, array of meds
        -:   50: * @param poz - int, index of the element you want to return
        -:   51: * @return element at the poz index - Medicament type
        -:   52: */
function getElement called 215 returned 100% blocks executed 100%
      215:   53:ElemType getElement(Farmacie* far, int poz){
      215:   54:    return far->elems[poz];
      215:   54-block  0
        -:   55:}
        -:   56:
        -:   57:/**
        -:   58: * repo function to get the size of the array
        -:   59: * @param farmacie - Farmacie*, array of meds
        -:   60: * @return size of array - int
        -:   61: */
function size called 642 returned 100% blocks executed 100%
      642:   62:int size(Farmacie* far){
      642:   63:    return far->len;
      642:   63-block  0
        -:   64:}
        -:   65:
        -:   66:/**
        -:   67: * repo function to add an element to the array, adds the element to the end of the array
        -:   68: * if an element with the same id doesnt exist, or increments the amount otherwise
        -:   69: * @param farmacie - Farmacie*, array of meds
        -:   70: * @param med - Medicament*
        -:   71: */
function addMed called 93 returned 100% blocks executed 100%
       93:   72:void addMed(Farmacie* far, ElemType med){
      162:   73:    for (int i = 0; i < size(far); i++)
       93:   73-block  0
       69:   73-block  1
      162:   73-block  2
call    0 returned 162
branch  1 taken 71
branch  2 taken 91 (fallthrough)
       71:   74:        if (getId(med) == getId(getElement(far, i))){
       71:   74-block  0
call    0 returned 71
call    1 returned 71
call    2 returned 71
branch  3 taken 2 (fallthrough)
branch  4 taken 69
        2:   75:            setAmount(getElement(far, i), getAmount(getElement(far, i)) + getAmount(med));
        2:   75-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
        2:   76:            destroyMed(med);
call    0 returned 2
        2:   77:            return;
        -:   78:        }
       91:   79:    if (far->len == far->maxCapacity)
       91:   79-block  0
branch  0 taken 45 (fallthrough)
branch  1 taken 46
       45:   80:        resize(far);
       45:   80-block  0
call    0 returned 45
       91:   81:    far->elems[size(far)] = med;
       91:   81-block  0
call    0 returned 91
       91:   82:    far->len++;
        -:   83:}
        -:   84:
        -:   85:/**
        -:   86: * repo function to get all the items in the array
        -:   87: * @param farmacie - Farmacie*, array of meds
        -:   88: * @return far - Farmacie*, array of meds
        -:   89: */
function getAll called 6 returned 100% blocks executed 100%
        6:   90:Farmacie* getAll(Farmacie* far){
        6:   91:    return far;
        6:   91-block  0
        -:   92:}
        -:   93:
        -:   94:/**
        -:   95: * repo function to change an element in the array, changes the name and concentration
        -:   96: * if an element with the given id exist, throws error otherwise
        -:   97: * @param farmacie - Farmacie*, array of meds
        -:   98: * @param med - Medicament*
        -:   99: * @return 1 - if the element doesnt exist
        -:  100: *         0 - if everything went well
        -:  101: */
function changeMed called 4 returned 100% blocks executed 100%
        4:  102:int changeMed(Farmacie* far, ElemType med){
        7:  103:    for (int i=0; i<size(far); i++){
        4:  103-block  0
        3:  103-block  1
        7:  103-block  2
call    0 returned 7
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  104:        if (getId(med) == getId(getElement(far, i))){
        6:  104-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        -:  105:            unsigned long long nr;
        3:  106:            Medicament* medicament = getElement(far, i);
        3:  106-block  0
call    0 returned 3
        3:  107:            nr = strlen(getName(med)) + 1;
call    0 returned 3
        3:  108:            free(medicament->nume);
        3:  109:            medicament->nume = malloc(sizeof(char) * nr);
        3:  110:            strcpy(medicament->nume, getName(med));
call    0 returned 3
        -:  111:
        3:  112:            nr = strlen(getConcentration(med)) + 1;
call    0 returned 3
        3:  113:            free(medicament->concentratie);
        3:  114:            medicament->concentratie = malloc(sizeof(char) * nr);
        3:  115:            strcpy(medicament->concentratie, getConcentration(med));
call    0 returned 3
        3:  116:            return 0;
        -:  117:        }
        -:  118:    }
        1:  119:    return 1;
        1:  119-block  0
        -:  120:}
        -:  121:
        -:  122:/**
        -:  123: * repo function to delete an element in the array, set the amount to 0, moves it to the back
        -:  124: * of the array and descreses the length if the item exist, throws error otherwise
        -:  125: * @param farmacie - Farmacie*, array of meds
        -:  126: * @param id - int,>0
        -:  127: * @return 1 - if the element doesnt exist
        -:  128: *         0 - if everything went well
        -:  129: */
function deleteMed called 3 returned 100% blocks executed 100%
        3:  130:int deleteMed(Farmacie* far,int id){
        4:  131:    for (int i=0;i<size(far);i++)
        3:  131-block  0
        1:  131-block  1
        4:  131-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  132:        if (id == getId(getElement(far, i))){
        3:  132-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  133:            destroyMed(far->elems[i]);
        2:  133-block  0
call    0 returned 2
        6:  134:            for(int j=i;j<size(far);j++)
        6:  134-block  0
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
        4:  135:                far->elems[j] = far->elems[j+1];
        4:  135-block  0
        2:  136:            far->len--;
        2:  137:            return 0;
        2:  137-block  0
        -:  138:        }
        1:  139:    return 1;
        1:  139-block  0
        -:  140:}
        -:  141:
function copyFarmacie called 28 returned 100% blocks executed 100%
       28:  142:Farmacie* copyFarmacie(Farmacie* far, CopyFct functiecopie){
       28:  143:    Farmacie* farmacie = createFarmacie();
       28:  143-block  0
call    0 returned 28
       64:  144:    for (int i=0;i<size(far);i++){
       64:  144-block  0
call    0 returned 64
branch  1 taken 36
branch  2 taken 28 (fallthrough)
       36:  145:        ElemType med = getElement(far,i);
       36:  145-block  0
call    0 returned 36
       36:  146:        addMed(farmacie, functiecopie(med));
call    0 returned 36
call    1 returned 36
        -:  147:    }
       28:  148:    return farmacie;
       28:  148-block  0
        -:  149:}
        -:  150:
function testAddFarmacie called 1 returned 100% blocks executed 84%
        1:  151:void testAddFarmacie(){
        1:  152:    Farmacie* far = createFarmacie();
        1:  152-block  0
call    0 returned 1
        1:  153:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  154:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
       1*:  155:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  155-block  0
call    3 never executed
        1:  155-block  1
        1:  156:    Medicament* med1 = getElement(far, 0);
        1:  156-block  0
call    0 returned 1
       1*:  157:    assert (strcmp(getName(med1), "paracetamol") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  157-block  0
call    3 never executed
        1:  157-block  1
        1:  158:    Medicament* med2 = getElement(far, 1);
        1:  158-block  0
call    0 returned 1
       1*:  159:    assert (strcmp(getName(med2),"xanax")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  159-block  0
call    3 never executed
        1:  159-block  1
        1:  160:    addMed(far, createMed(1,"paracetamol","70%",10));
        1:  160-block  0
call    0 returned 1
call    1 returned 1
        1:  161:    Medicament* med3 = getElement(far, 0);
call    0 returned 1
       1*:  162:    assert(size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  162-block  0
call    3 never executed
        1:  162-block  1
       1*:  163:    assert(getAmount(med3)==20);
        1:  163-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  163-block  1
call    3 never executed
        1:  163-block  2
        1:  164:    destroyFarmacie(far, (DestroyFct) destroyMed, 0);
        1:  164-block  0
call    0 returned 1
        1:  165:}
        -:  166:
function testCopyList called 1 returned 100% blocks executed 88%
        1:  167:void testCopyList(){
        1:  168:    Farmacie* far = createFarmacie();
        1:  168-block  0
call    0 returned 1
        1:  169:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  170:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
        1:  171:    Farmacie* far2 = copyFarmacie(far, (CopyFct) copyMedicament);
call    0 returned 1
       1*:  172:    assert(size(far2) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  172-block  0
call    3 never executed
        1:  172-block  1
        1:  173:    Medicament* med = getElement(far2, 0);
        1:  173-block  0
call    0 returned 1
       1*:  174:    assert(strcmp(med->nume, "paracetamol") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  174-block  0
call    2 never executed
        1:  174-block  1
        1:  175:    destroyFarmacie(far, (DestroyFct) destroyMed, 0);
        1:  175-block  0
call    0 returned 1
        1:  176:    destroyFarmacie(far2, (DestroyFct) destroyMed, 0);
call    0 returned 1
        1:  177:}
        -:  178:
function testListadeListe called 1 returned 100% blocks executed 88%
        1:  179:void testListadeListe() {
        1:  180:    Farmacie *fardefar = createFarmacie();
        1:  180-block  0
call    0 returned 1
        1:  181:    Farmacie *far = createFarmacie();
call    0 returned 1
        1:  182:    addMed(far, createMed(1, "paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  183:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
        1:  184:    addMed(fardefar, far);
call    0 returned 1
        1:  185:    Farmacie* copie = copyFarmacie(far, (CopyFct) copyMedicament);
call    0 returned 1
        1:  186:    addMed(fardefar, copie);
call    0 returned 1
       1*:  187:    assert(size(fardefar) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  187-block  0
call    3 never executed
        1:  187-block  1
       1*:  188:    assert(size(far) == 2);
        1:  188-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  188-block  1
call    3 never executed
        1:  188-block  2
        1:  189:    Farmacie* copie2 = getElement(fardefar, 1);
        1:  189-block  0
call    0 returned 1
       1*:  190:    assert(size(copie2) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  190-block  0
call    3 never executed
        1:  190-block  1
        1:  191:    destroyFarmacie(fardefar, (DestroyFct) destroyFarmacieMed, 0);
        1:  191-block  0
call    0 returned 1
        1:  192:}
        -:  193:
function testChangeFarmacie called 1 returned 100% blocks executed 83%
        1:  194:void testChangeFarmacie(){
        1:  195:    Farmacie *far = createFarmacie();
        1:  195-block  0
call    0 returned 1
        1:  196:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  197:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
       1*:  198:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  198-block  0
call    3 never executed
        1:  198-block  1
        1:  199:    Farmacie* med = getAll(far);
        1:  199-block  0
call    0 returned 1
       1*:  200:    assert(size(med)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  200-block  0
call    3 never executed
        1:  200-block  1
        1:  201:    Medicament* med1 = getElement(far, 0);
        1:  201-block  0
call    0 returned 1
       1*:  202:    assert (strcmp(getName(med1), "paracetamol") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  202-block  0
call    3 never executed
        1:  202-block  1
        1:  203:    Medicament* med2 = getElement(far, 1);
        1:  203-block  0
call    0 returned 1
       1*:  204:    assert (strcmp(getName(med2),"xanax")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  204-block  0
call    3 never executed
        1:  204-block  1
        1:  205:    Medicament* medChange1 = createMed(1, "nurofen", "30%", 10);
        1:  205-block  0
call    0 returned 1
        1:  206:    changeMed(far, medChange1);
call    0 returned 1
        1:  207:    Medicament* medChange2 = createMed(2, "strepsils", "55%", 4);
call    0 returned 1
        1:  208:    changeMed(far, medChange2);
call    0 returned 1
       1*:  209:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  209-block  0
call    3 never executed
        1:  209-block  1
        1:  210:    Medicament* med3 = getElement(far, 0);
        1:  210-block  0
call    0 returned 1
       1*:  211:    assert (strcmp(getName(med3), "nurofen") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  211-block  0
call    3 never executed
        1:  211-block  1
       1*:  212:    assert (strcmp(getConcentration(med3), "30%")==0);
        1:  212-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  212-block  1
call    3 never executed
        1:  212-block  2
        1:  213:    Medicament* med4 = getElement(far, 1);
        1:  213-block  0
call    0 returned 1
       1*:  214:    assert (strcmp(getName(med4),"strepsils")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  214-block  0
call    3 never executed
        1:  214-block  1
       1*:  215:    assert (strcmp(getConcentration(med4), "55%") == 0);
        1:  215-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  215-block  1
call    3 never executed
        1:  215-block  2
        1:  216:    destroyMed(medChange1);
        1:  216-block  0
call    0 returned 1
        1:  217:    destroyMed(medChange2);
call    0 returned 1
        1:  218:    destroyFarmacie(far, (DestroyFct) destroyMed, 0);
call    0 returned 1
        1:  219:}
        -:  220:
function testDeleteFarmacie called 1 returned 100% blocks executed 88%
        1:  221:void testDeleteFarmacie(){
        1:  222:    Farmacie* far = createFarmacie();
        1:  222-block  0
call    0 returned 1
        1:  223:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  224:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
       1*:  225:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  225-block  0
call    3 never executed
        1:  225-block  1
        1:  226:    deleteMed(far, 1);
        1:  226-block  0
call    0 returned 1
       1*:  227:    assert(size(far)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  227-block  0
call    3 never executed
        1:  227-block  1
        1:  228:    destroyFarmacie(far, (DestroyFct) destroyMed, 0);
        1:  228-block  0
call    0 returned 1
        1:  229:}
